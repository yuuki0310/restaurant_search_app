<h1>レストラン検索</h1>
<%= form_with url: "/restaurants", method: :get do |f| %>
  <%= f.hidden_field :lat %>
  <%= f.hidden_field :lng %>
  <p>検索範囲</p>
  <div class="radio-buttons">
    <%= f.radio_button :range, 1, id: "range_300m" %>
    <%= f.label :range_300m, "300m", for: "range_300m" %>
    <%= f.radio_button :range, 2, id: "range_500m" %>
    <%= f.label :range_500m, "500m", for: "range_500m" %>
    <%= f.radio_button :range, 3, id: "range_1000m", checked: true %>
    <%= f.label :range_1000m, "1000m", for: "range_1000m" %>
    <%= f.radio_button :range, 4, id: "range_2000m" %>
    <%= f.label :range_2000m, "2000m", for: "range_2000m" %>
    <%= f.radio_button :range, 5, id: "range_3000m" %>
    <%= f.label :range_3000m, "3000m", for: "range_3000m" %>
  </div>
  <%= f.submit "検索" %>
<% end %>
<input type="text" id="keyword"><button id="latlng_search">検索実行</button>
<div id="map" style="height: 500px; width: 100%;"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async></script>

<script>
  let map;
  let marker
  function initMap() {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(function (position) {
        // 位置情報が取得できた場合の処理
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
  
        // 取得した位置情報を中心に表示
        const latLng = new google.maps.LatLng({lat: lat, lng: lng});
        setMap(latLng);
  
        // inputにlatlngをセット
        document.querySelector('input[name="lat"]').value = lat;
        document.querySelector('input[name="lng"]').value = lng;
      }, function(error) {
        // 位置情報が取得できなかった場合の処理
        const lat = 34.7038394;
        const lng = 135.4949209;
        
        // グランフロントを中心に表示
        const latLng = new google.maps.LatLng({lat: lat, lng: lng});
        setMap(latLng);
  
        // inputにlatlngをセット
        document.querySelector('input[name="lat"]').value = lat;
        document.querySelector('input[name="lng"]').value = lng;
      });
    } else {
      // 位置情報の取得がサポートされていない場合の処理
      const lat = 34.7038394;
      const lng = 135.4949209;
      
      // グランフロントを中心に表示
      const latLng = new google.maps.LatLng({lat: lat, lng: lng});
      setMap(latLng);

      // inputにlatlngをセット
      document.querySelector('input[name="lat"]').value = lat;
      document.querySelector('input[name="lng"]').value = lng;
    }

    // 検索実行ボタンが押下されたとき
    document.getElementById('latlng_search').addEventListener('click', function() {

      let place = document.getElementById('keyword').value;
      let geocoder = new google.maps.Geocoder();

      geocoder.geocode({
        address: place
      }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {

          let bounds = new google.maps.LatLngBounds();

          for (let i in results) {
            if (results[0].geometry) {
              // 緯度経度を取得
              let latlng = results[0].geometry.location;
              // 地図をセット
              setMap(latlng);
              // inputにlatlngをセット
              setLatLang(latlng.lat, latlng.lng)
            }
          }
        } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
          alert("見つかりません");
        } else {
          console.log(status);
          alert("エラー発生");
        }
      });
    });
  }
  
  // 地図のセットを実施する
  function setMap(setplace) {
    // 地図の中心を設定
    map = new google.maps.Map(document.getElementById('map'), {
      center:setplace,
      zoom: 15
    });

    // 既にあるマーカーを削除
    deleteMakers();

    // マーカーのセットを実施する
    marker = new google.maps.Marker({
      position: setplace,
      map: map,
    });
  }

  //マーカーを削除する
  function deleteMakers() {
    if(marker != null){
      marker.setMap(null);
    }
    marker = null;
  }

  // inputにlatlngをセット
  function setLatLang(lat, lng) {
    $('input[name="lat"]').val(lat);
    $('input[name="lng"]').val(lng);
  }
</script>
